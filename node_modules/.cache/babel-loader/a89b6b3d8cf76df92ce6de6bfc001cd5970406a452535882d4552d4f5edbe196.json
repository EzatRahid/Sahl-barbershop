{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezatb\\\\OneDrive\\\\Desktop\\\\sahl\\\\sahl\\\\src\\\\App.js\";\nimport Navbar from \"./components/navbar\";\nimport Main from \"./components/main\";\nimport About from \"./components/about\";\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nuseEffect(() => {\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      entry.target.classList.toggle('show', entry.isIntersecting);\n      if (entry.isIntersecting) {\n        observer.unobserve(entry.target); // Corrected this line\n      }\n    });\n  });\n\n  // Add your logic to select and observe elements here\n  // For example:\n  // const elementsToObserve = document.querySelectorAll('.your-elements');\n  // elementsToObserve.forEach((element) => {\n  //   observer.observe(element);\n  // });\n\n  return () => {\n    // Cleanup when the component unmounts\n    observer.disconnect();\n  };\n}, []);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navbar","Main","About","jsxDEV","_jsxDEV","useEffect","observer","IntersectionObserver","entries","forEach","entry","target","classList","toggle","isIntersecting","unobserve","disconnect","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ezatb/OneDrive/Desktop/sahl/sahl/src/App.js"],"sourcesContent":["import Navbar from \"./components/navbar\";\nimport Main from \"./components/main\";\nimport About from \"./components/about\";\nimport './styles.css'\n\nuseEffect(() => {\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      entry.target.classList.toggle('show', entry.isIntersecting);\n      if (entry.isIntersecting) {\n        observer.unobserve(entry.target); // Corrected this line\n      }\n    });\n  });\n\n  // Add your logic to select and observe elements here\n  // For example:\n  // const elementsToObserve = document.querySelectorAll('.your-elements');\n  // elementsToObserve.forEach((element) => {\n  //   observer.observe(element);\n  // });\n\n  return () => {\n    // Cleanup when the component unmounts\n    observer.disconnect();\n  };\n}, [])\n\nfunction App() {\n  return (\n    <div>\n      <Navbar/>\n      <Main/>\n      <About/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,qBAAqB;AACxC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAO,cAAc;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErBC,SAAS,CAAC,MAAM;EACd,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAAEC,OAAO,IAAK;IACrDA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;MACzBA,KAAK,CAACC,MAAM,CAACC,SAAS,CAACC,MAAM,CAAC,MAAM,EAAEH,KAAK,CAACI,cAAc,CAAC;MAC3D,IAAIJ,KAAK,CAACI,cAAc,EAAE;QACxBR,QAAQ,CAACS,SAAS,CAACL,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC;MACpC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;;EAEA,OAAO,MAAM;IACX;IACAL,QAAQ,CAACU,UAAU,CAAC,CAAC;EACvB,CAAC;AACH,CAAC,EAAE,EAAE,CAAC;AAEN,SAASC,GAAGA,CAAA,EAAG;EACb,oBACEb,OAAA;IAAAc,QAAA,gBACEd,OAAA,CAACJ,MAAM;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACTlB,OAAA,CAACH,IAAI;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACPlB,OAAA,CAACF,KAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAACC,EAAA,GARQN,GAAG;AAUZ,eAAeA,GAAG;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}